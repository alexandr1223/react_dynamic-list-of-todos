{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Completed","TodoList","todos","selectUser","selectedUserId","useState","todosList","setTodosList","search","setSearch","all","completed","setCompleted","useEffect","filter","item","isSearch","title","includes","active","className","type","placeholder","value","onChange","e","target","onClick","sort","Math","random","map","todo","classnames","readOnly","userId","id","request","url","fetch","then","resp","json","CurrentUser","removeUser","userDetail","setUserDetail","data","name","email","phone","App","setTodos","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02c2f087.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  selectUser: (userId: number) => void,\n};\n\nenum Completed {\n  all = 'All',\n  active = 'Active',\n  completed = 'Completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [todosList, setTodosList] = useState(todos);\n  const [search, setSearch] = useState<string>('');\n  const [completed, setCompleted] = useState<Completed | string>(Completed.all);\n\n  useEffect(() => {\n    setTodosList(todos.filter(item => {\n      const isSearch = item.title.includes(search);\n\n      switch (completed) {\n        case Completed.active:\n          return !item.completed && isSearch;\n\n        case Completed.completed:\n          return item.completed && isSearch;\n\n        case Completed.all:\n        default:\n          return isSearch;\n      }\n    }));\n  }, [search, completed, todos]);\n\n  const randomOrder = () => {\n    return setTodosList(\n      [...todosList].sort(() => Math.random() - 0.5),\n    );\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <div className=\"TodoList__nav\">\n          <input\n            type=\"search\"\n            className=\"TodoList__search\"\n            placeholder=\"Search todo\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <select\n            className=\"TodoList__select\"\n            value={completed}\n            onChange={(e) => setCompleted(e.target.value)}\n          >\n            <option value={Completed.all}>\n              {Completed.all}\n            </option>\n            <option value={Completed.active}>\n              {Completed.active}\n            </option>\n            <option value={Completed.completed}>\n              {Completed.completed}\n            </option>\n          </select>\n          <button\n            type=\"button\"\n            className=\"TodoList__random button\"\n            onClick={() => randomOrder()}\n          >\n            Random\n          </button>\n        </div>\n        <ul className=\"TodoList__list\">\n          {todosList.map((todo) => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': todo.completed === false },\n                { 'TodoList__item--checked': todo.completed === true },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                    todo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => fetch(`${BASE_URL}${url}`)\n  .then(resp => resp.json());\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserDetails = (userId: number) => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUserDetails } from '../../api/api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  removeUser: (selectedUserId: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  removeUser,\n}) => {\n  const [userDetail, setUserDetail] = useState<User>();\n\n  useEffect(() => {\n    getUserDetails(selectedUserId)\n      .then((data) => setUserDetail(data));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {userDetail && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${userDetail.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {userDetail.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {userDetail.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {userDetail.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear button\"\n            onClick={() => removeUser(selectedUserId)}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    getTodos()\n      .then((data) => setTodos(data));\n  }, []);\n\n  const selectUser = (userId: number) => {\n    if (selectedUserId !== userId) {\n      setSelectedUserId(userId);\n    }\n  };\n\n  const removeUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          selectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              removeUser={removeUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}